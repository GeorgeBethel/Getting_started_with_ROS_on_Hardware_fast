// Generated by gencpp from file led_control/led.msg
// DO NOT EDIT!


#ifndef LED_CONTROL_MESSAGE_LED_H
#define LED_CONTROL_MESSAGE_LED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace led_control
{
template <class ContainerAllocator>
struct led_
{
  typedef led_<ContainerAllocator> Type;

  led_()
    : ledState(false)  {
    }
  led_(const ContainerAllocator& _alloc)
    : ledState(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ledState_type;
  _ledState_type ledState;





  typedef boost::shared_ptr< ::led_control::led_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::led_control::led_<ContainerAllocator> const> ConstPtr;

}; // struct led_

typedef ::led_control::led_<std::allocator<void> > led;

typedef boost::shared_ptr< ::led_control::led > ledPtr;
typedef boost::shared_ptr< ::led_control::led const> ledConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::led_control::led_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::led_control::led_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace led_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'led_control': ['/home/george/Getting_started_with_ROS_on_Hardware_fast/src/led_control/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::led_control::led_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::led_control::led_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::led_control::led_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::led_control::led_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::led_control::led_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::led_control::led_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::led_control::led_<ContainerAllocator> >
{
  static const char* value()
  {
    return "781db327ac3ac8924f798b25d3f9bd79";
  }

  static const char* value(const ::led_control::led_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x781db327ac3ac892ULL;
  static const uint64_t static_value2 = 0x4f798b25d3f9bd79ULL;
};

template<class ContainerAllocator>
struct DataType< ::led_control::led_<ContainerAllocator> >
{
  static const char* value()
  {
    return "led_control/led";
  }

  static const char* value(const ::led_control::led_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::led_control::led_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ledState #string to hold the desired LED state\n"
;
  }

  static const char* value(const ::led_control::led_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::led_control::led_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ledState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct led_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::led_control::led_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::led_control::led_<ContainerAllocator>& v)
  {
    s << indent << "ledState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ledState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LED_CONTROL_MESSAGE_LED_H
